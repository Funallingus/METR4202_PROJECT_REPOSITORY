
%{
function takes a rgb image of a scene and attempts to 
match a checkerboard fiducial

boxPolygon is a set of 4 vetors which describe a bounding box 
of the fiducial found

centroid is a matrix of the form [x y] where x and y are the 
position in the scene of the centre of the polygon found
%}
[frame, depthIm, time, meta] = capture_frame(colorVid, depthVid);

marker_1 = imread('Workspace marker library/workspace_marker_1.png');
marker_2 = imread('Workspace marker library/workspace_marker_2.png');
marker_3 = imread('Workspace marker library/workspace_marker_3.png');
marker_4 = imread('Workspace marker library/workspace_marker_4.png');
marker_5 = imread('Workspace marker library/workspace_marker_5.png');
marker_6 = imread('Workspace marker library/workspace_marker_6.png');
marker_7 = imread('Workspace marker library/workspace_marker_7.png');
marker_8 = imread('Workspace marker library/workspace_marker_8.png');


marker = {marker_1, marker_2, marker_3, marker_4, marker_5,...
    marker_6, marker_7, marker_8};

fprintf('Grayscale scene and extract features...');


width = size(frame, 2)/2;
height = size(frame, 1)/2;
sceneBottomLeft = imcrop(frame, [0, height, width, height]);
sceneBottomRight = imcrop(frame, [width, height, width, height]);
sceneTopLeft = imcrop(frame, [0, 0, width, height]);
sceneTopRight = imcrop(frame, [width, 0, width, height]);

sceneFrames = {sceneTopLeft, sceneTopRight, sceneBottomLeft, sceneBottomRight};
figure(5);



for j = 1:4
    boxPairs = [];
    index = 1;
    
    sceneGray = rgb2gray(sceneFrames{j});
    scenePoints = detectSURFFeatures(sceneGray);
    [sceneFeatures, scenePoints] = extractFeatures(sceneGray, scenePoints);
    
 %%search through fiducial library for best match
    for i = 1 : size(marker, 2)
        
        fiducialGray = rgb2gray(marker{i});
        fiducialPoints = detectSURFFeatures(fiducialGray);
        [fiducialFeatures, fiducialPoints] = extractFeatures(fiducialGray, fiducialPoints);
        [boxPairsSearch, status] = matchFeatures(fiducialFeatures, sceneFeatures);
        if size(boxPairsSearch) > size(boxPairs)
            boxPairs = boxPairsSearch;
            index = i;
        end
    end



    fprintf('Done\n');
    fprintf('Match features...');


    matchedFiducialPoints = fiducialPoints(boxPairs(:, 1), :);
    matchedScenePoints = scenePoints(boxPairs(:, 2), :);


    %%transform box onto scene image
    [tform, inlierFiducialPoints, inlierScenePoints, status] = ...
        estimateGeometricTransform(matchedFiducialPoints, matchedScenePoints, 'similarity');
    boxPolygon = [1, 1;...                           % top-left
            size(marker{index}, 2), 1;...                 % top-right
            size(marker{index}, 2), size(marker{index}, 1);... % bottom-right
            1, size(marker{index}, 1);...                 % bottom-left
            1, 1];                   % top-left again to close the polygon
    newBoxPolygon = transformPointsForward(tform, boxPolygon);



    centroid(1) = (newBoxPolygon(4, 1) + newBoxPolygon(2, 1)) / 2;
    centroid(2) = (newBoxPolygon(4, 2) + newBoxPolygon(2, 2)) / 2;


    subplot(2, 2, j);
    hold on;
    imshow(sceneFrames{j});
    line(newBoxPolygon(:, 1), newBoxPolygon(:, 2), 'Color', 'r');
    scatter(centroid(1), centroid(2), 'Marker', 'x');   
    hold off
    

end
 fprintf('Done\n');




